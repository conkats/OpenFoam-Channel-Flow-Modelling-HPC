/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.1.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict; 
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs            
(
    "/home/mbgxaa8/OpenFOAM/mbgxaa8-2.3.1/platforms/linux64GccDPOpt/lib/libRASModelsforHybrid.so"
    "/home/magid/OpenFOAM/magid-2.3.1/platforms/linux64GccDPOpt/lib/libincompressibleRSTMElliptic.so"
    "/home/magid/OpenFOAM/magid-2.3.1/platforms/linux64GccDPOpt/lib/libRASModelsforHybridBuoyant.so" 
  "/home/magid/OpenFOAM/magid-2.3.1/platforms/linux64GccDPOpt/lib/libRASModelsforHybrid.so"
);

application     pimpleFoam;

startFrom       latestTime;

startTime       0;

//stopAt          noWriteNow;
stopAt          endTime;

endTime         13420;//125;//1367.1;

maxCo           0.1;

adjustTimeStep  yes;

deltaT          0.003;

//writeControl     timeStep;
writeControl    adjustableRunTime;

writeInterval   2.0;

purgeWrite      5;

writeFormat     ascii;

writePrecision  6;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

minT  15;
maxT 15;

functions
{
fieldAverageRANS
{
    // Type of functionObject
    type fieldAverage;


    // Where to load it from (if not already in solver)
    functionObjectLibs ("libfieldFunctionObjects.so");

    // Whether to perform a clean restart, or start from previous
    // averaging info if available
    cleanRestart false;

    // Whether to reset the averaged fields after they have been written.
    // Used to average over only the preceding write interval for transient
    // cases.
    resetOnOutput false;

    outputControl outputTime;

    timeStart 1470;

    // Fields to be averaged. runTime modifiable!
    fields
    (
        U
        {
            mean            on;
            prime2Mean      on;
            base            time;
        }
        p
        {
            mean            on;
            prime2Mean      on;
            base            time;
        }
	epsilon
        {
            mean            on;
            prime2Mean      on;
            base            time;
        }
        k
        {
            mean            on;
            prime2Mean      on;
            base            time;
        }
        nut
        {
            mean            on;
            prime2Mean      on;
            base            time;
        }
        RelaxTime1
        {
            mean            on;
            prime2Mean      on;
            base            time;
        }
        RelaxTime2
        {
            mean            on;
            prime2Mean      on;
            base            time;
        }
        zoneWeight
        {
            mean            on;
            prime2Mean      on;
            base            time;
        }
        T
        {
            mean            on;
            prime2Mean      on;
            base            time;
        }
        UtimesT
        {
            mean            on;
            prime2Mean      off;
            base            time;
        }
        ModTrbHtFlux
        {
            mean            on;
            prime2Mean      off;
            base            time;
        }
    );

probes11
{

type probes; // Type of functionObject

// Where to load it from (if not already in solver)
functionObjectLibs ("libsampling.so");
enabled         true;
outputControl   timeStep;
outputInterval  1;
probeLocations // Locations to be probed. runTime modifiable!
(
(3.0787608005 0.33 1.5184364492)
);
// Fields to be probed. runTime modifiable!
fields
(
U
);
}

}

}
// ************************************************************************* //
